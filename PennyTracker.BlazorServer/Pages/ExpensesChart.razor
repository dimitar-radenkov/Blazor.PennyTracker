@using ChartJs.Blazor;

@using PennyTracker.BlazorServer.Services;

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util

<h3>Chart</h3>

<ChartJsPieChart @ref="this.pieChartJs" Config="@this.config" Width="300" Height="150" />

@code 
{
    private PieConfig config;
    private ChartJsPieChart pieChartJs;

    private IEnumerable<Expense> expenses;

    [Inject]
    public IExpenseService ExpenseService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Expenses"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            },
        };
        var expenses = await this.ExpenseService.GetAll();

        var data = expenses.GroupBy(
                p => p.Category,
                p => p.Amount,
                (key, g) => new { Category = key, Amount = g.Sum(), BackgroundColor = ColorUtil.RandomColorString() }).OrderBy(x => x.Amount);

        config.Data.Labels.AddRange(data.Select(x => x.Category.ToString()));

        var pieSet = new PieDataset
        {
            BackgroundColor = data.Select(x => x.BackgroundColor).ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        pieSet.Data.AddRange(data.Select(x => Convert.ToDouble(x.Amount)));
        config.Data.Datasets.Add(pieSet);
    }
}
